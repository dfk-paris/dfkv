<dfkv-record class="overlay-page">
  <a
    if={isSingle()}
    class="close d-print-none"
    href={closePath()}
  ><dfk-icon type="cross" /></a>

  <template if={state.item}>
    <div class="p-7">
      <div
        if={isSingle()}
        class="mb-6 d-print-none"
      >
        <dfkv-bookmark
          class="mr-2"
          item={state.item}
        />
        <a
          class="mr-2"
          onclick={event => print(event)}><dfk-icon type="print"
        /></a>
        <a onclick={event => openJson(event)}>
          <dfk-icon type="braces" />
        </a>
      </div>

      <div class="position-relative h-auto">
        <a
          if={isSingle() && !props.first(id())}
          class="previous d-print-none"
          onclick={event => previous(event)}
        >
          <dfk-icon type="chevron-left" />
        </a>

        <a
          if={isSingle() && !props.last(id())}
          class="next d-print-none"
          onclick={event => next(event)}
        >
          <dfk-icon type="chevron-right" />
        </a>

        <div class="float-right mt-4">{t('id')} {id()}</div>
        <h1 class="mt-4 mb-6 dfk-serif fw-normal">{state.item.title()}</h1>
      </div>

      <div class="mb-6 fst-italic">
        <span each={(person, i) in state.item.creators()}>
          {i == 0 ? '' : ', '}
          <a
            class="text-decoration-underline"
            onclick={event => openPerson(person, event)}
          >{person.display_name}</a>
        </span>
      </div>

      <div class="volumes">
        <div
          each={volume in state.item.volumes()}
          class="volume"
        >
          <div if={volume.journal} class="mb-3">
            <a
              class="d-block text-decoration-underline"
              onclick={event => openJournal(volume.journal, event)}
            >{l(volume.journal)}</a>
          </div>
          <div class="d-flex justify-content-between">
            <div>{volume.bibliography}</div>
            <div class="text-right">
              <a
                href={iiifLink(volume)}
                target="_blank"
                rel="noopener"
              ><dfk-icon type="book" /></a>
            </div>
          </div>
        </div>
      </div>

      <dfk-blockquote
        if={state.item.citation()}
        class="mt-7"
      >
        {state.item.citation()}
      </dfk-blockquote>

      <div class="expose mt-7">
        <div class="attribute-list">
          <template if={state.item.transcription()}>
            <div class="attribute">{cap(t('description_comment'))}</div>
            <div class="value">{state.item.transcription()}</div>
          </template>

          <template if={state.item.involved().length}>
            <div class="attribute">{cap(t('people'))}</div>
            <div class="value">
              <a
                each={(person, i) in state.item.involved()}
                class="d-block text-decoration-underline"
                onclick={event => openPerson(person, event)}
              >{person.display_name[0]}</a>
            </div>
          </template>

          <template if={state.item.textTypes()}>
            <div class="attribute">{cap(t('text_type'))}</div>
            <div class="value">{state.item.textTypes()}</div>
          </template>

          <template if={state.item.tags()}>
            <div class="attribute">{cap(t('tags'))}</div>
            <div class="value">{state.item.tags()}</div>
          </template>
        </div>
      </div>

      <div class="expose mt-7">
        <div class="attribute-list">
          <div class="attribute">{cap(t('project_affiliation'))}</div>
          <div class="value">{state.item.project()}</div>

          <div class="attribute">{cap(t('citation_format'))}</div>
          <div class="value">
            <dfkv-citation item={state.item} />
          </div>
        </div>
      </div>

      <dfkv-criteria
        class="d-block d-screen-none mt-6 text-half-muted"
        criteria={props.criteria}
      />
    </div>


    <!-- person dialog -->
    <dfk-popup open={!!state.person}  if={!!state.person}>
      <div style="margin: 40px">
        <div class="header d-flex justify-content-between">
          <div class="tag-line mb-5">{cap(t('person_details'))}</div>
          <a onclick={event => closePerson(event)}>
            <dfk-icon type="cross" />
          </a>
        </div>
        <h2 class="mt-1">{state.person.display_name[0]}</h2>
        <div class="body">
          <div class="attribute-list mt-7">
            <template if={state.person.birth_date || state.person.death_date}>
              <div class="value">
                <div if={state.person.birth_date}>
                  {cap(t('born'))} {formatDate(state.person.birth_date)}

                  <span if={state.person.birth_place}>
                    ,
                    <a
                      href="https://www.wikidata.org/wiki/{state.person.birth_place.id}"
                      target="_blank"
                      rel="noopener"
                    >
                      {state.person.birth_place.name}
                    </a>
                  </span>
                </div>
                <div if={state.person.death_date}>
                  {cap(t('died'))} {formatDate(state.person.death_date)}

                  <span if={state.person.death_place}>
                    ,
                    <a
                      href="https://www.wikidata.org/wiki/{state.person.death_place.id}"
                      target="_blank"
                      rel="noopener"
                    >
                      {state.person.death_place.name}
                    </a>
                  </span>
                </div>

                <div class="fs-6">{t('source_wikidata')}</div>
              </div>
            </template>

            <div class="attribute">{cap(t('authority_data'))}</div>
            <div class="value">
              <dfk-authority-link type="ulan" id={state.person.ulan_id} />
              <dfk-authority-link type="wikidata" id={state.person.wikidata_id} />
            </div>

            <template if={state.person.display_name.length > 1}>
              <div class="attribute">{cap(t('people_other_forms'))}</div>
              <div class="value">
                <div each={name in state.person.display_name.slice(1)}>{name}</div>
              </div>
            </template>
          </div>
        </div>
      </div>
    </dfk-popup>

    <!-- journal dialog -->
    <dfk-popup open={!!state.journal}  if={!!state.journal}>
      <div style="margin: 40px">
        <div class="header d-flex justify-content-between">
          <div class="tag-line mb-5">{cap(t('journal_details'))}</div>
          <a onclick={event => closeJournal(event)}>
            <dfk-icon type="cross" />
          </a>
        </div>

        <h2 class="mt-1">{l(state.journal)}</h2>
        <div class="body">
          <div class="attribute-list mt-7">
            <div class="attribute">
              {cap(t('authority_data'))}
            </div>
            <div class="value">
              <dfk-authority-link type="gnd" id={state.journal.gnd_id} />
              <dfk-authority-link type="bnf" id={state.journal.bnf_id} />
              <dfk-authority-link type="wikidata" id={state.journal.wikidata_id} />
            </div>
          </div>
        </div>
      </div>
    </dfk-popup>

    <!-- json dialog -->
    <dfk-popup open={!!state.json} if={!!state.json}>
      <div style="margin: 40px">
        <div class="header d-flex justify-content-between">
          <div class="tag-line mb-5">{cap(t('data'))}</div>
          <a onclick={event => closeJson(event)}>
            <dfk-icon type="cross" />
          </a>
        </div>

        <h2 class="mt-1">{cap(t('json'))}</h2>
        <div class="body" style="width: 800px">
          <pre><!--
            --><dfk-raw
              html={highlight(state.item.json(), 'javascript')}
            ></dfk-raw>
          </pre>
        </div>
      </div>
    </dfk-popup>
  </template>
  
  <script>
    import hljs from 'highlight.js/lib/core'
    import javascript from 'highlight.js/lib/languages/javascript'
    import 'highlight.js/styles/github.css'

    import {Url, util} from '@wendig/lib'

    import AuthorityLink from '../authority_link.riot'
    import Blockquote from '../blockquote.riot'
    import Bookmark from './bookmark.riot'
    import Citation from './citation.riot'
    import Criteria from './criteria.riot'
    import Icon from '../icon.riot'
    import Popup from '../popup.riot'
    import Raw from '../raw.riot'
    import Search from '../../lib/search'

    hljs.registerLanguage('javascript', javascript);

    export default class {
      static components = {
        'dfk-authority-link': AuthorityLink,
        'dfk-blockquote': Blockquote,
        'dfkv-bookmark': Bookmark,
        'dfkv-citation': Citation,
        'dfkv-criteria': Criteria,
        'dfk-icon': Icon,
        'dfk-popup': Popup,
        'dfk-raw': Raw
      }

      constructor() {
        this.fetch = this.fetch.bind(this)
      }

      title() {
        if (this.isSingle()) {
          return this.state.item && this.state.item.id()
        } else {
          return ''
        }
      }

      onBeforeMount() {
        if (this.isSingle()) {
          window.addEventListener('hashchange', this.fetch)
          this.fetch()
        } else {
          this.state.item = this.props.item
        }
      }

      isSingle() {
        return !this.props.item
      }

      onUnmounted() {
        if (!this.props.item) {
          window.removeEventListener('hashchange', this.fetch)
        }
      }

      fetch() {
        Search.findRecord(this.id()).then(data => this.update({'item': data}))
      }

      previous(event) {
        event.preventDefault()

        this.bus.emit('to-previous-record', {currentId: this.id()})
      }

      next(event) {
        event.preventDefault()

        this.bus.emit('to-next-record', {currentId: this.id()})
      }

      id() {
        if (this.isSingle()) {
          const url = Url.current()
          return parseInt(url.hashPath().split('/')[2])
        } else {
          return this.state.item.id()
        }
      }

      closePath() {
        const url = Url.current()
        url.setHashPath('')
        return url.formatHash() || '#'
      }

      openPerson(person, event) {
        event.preventDefault()

        this.update({person: person})
      }

      closePerson() {
        this.update({person: null})
      }

      openJournal(journal, event) {
        event.preventDefault()

        this.update({journal: journal})
      }

      closeJournal() {
        this.update({journal: null})
      }

      openJson(event) {
        event.preventDefault()

        // util.download(this.state.item.json(), {
        //   contentType: 'applicat/json',
        //   filename: `${this.state.item.id()}.json`
        // })

        this.update({json: true})
      }

      closeJson() {
        this.update({json: false})
      }

      formatDate(str) {
        const m = str.match(/^([+-])?([\d]+)\-(\d+)\-(\d+)/)
        if (!m) {return null}

        let [_, sign, year, month, day] = m
        year = parseInt(year) * (sign == '-' ? -1 : 1)
        month = parseInt(month)
        day = parseInt(day)

        const result = [year]
        if (month > 0) {result.unshift(month)}
        if (day > 0) {result.unshift(day)}

        return result.join('.')
      }

      iiifLink(volume) {
        const params = {
          manifest: 'x',
          canvas: volume['link_iiif']
        }
        const url = new Url({hashParams: params})

        return `${iiifViewerUrl}${url.formatHash()}`
      }

      print(event) {
        event.preventDefault()

        const styles = document.querySelectorAll('head > style')
        const css = [...styles].map(e => e.innerHTML).join()

        util.printElement(this.root, {css: css, print: true})
      }

      highlight(code, language) {
        return hljs.highlight(code, {language: language}).value
      }
    }
  </script>
</dfkv-record>
