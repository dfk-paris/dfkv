<dfkv-record>
  <a class="close" href={closePath()}><dfk-icon type="cross" /></a>

  <a
    if={!props.first(id())}
    class="previous" onclick={event => previous(event)}
  >
    <dfk-icon type="chevron-left" />
  </a>

  <a
    if={!props.last(id())}
    class="next"
    onclick={event => next(event)}
  >
    <dfk-icon type="chevron-right" />
  </a>

  <template if={state.item}>
    <div class="p-7">
      <h1>{state.item.title()}</h1>
      
      <div>
        {state.item.transcription()}
      </div>
    </div>
  </template>
  
  <script>
    import {Url} from '@wendig/lib'

    import Icon from '../icon.riot'
    import Search from '../../lib/search'

    export default class {
      static components = {
        'dfk-icon': Icon
      }

      constructor() {
        this.fetch = this.fetch.bind(this)
      }

      onBeforeMount() {
        window.addEventListener('hashchange', this.fetch)

        this.fetch()
      }

      onUnmounted() {
        window.removeEventListener('hashchange', this.fetch)
      }

      fetch() {
        Search.findRecord(this.id()).then(data => this.update({'item': data}))
      }

      previous(event) {
        event.preventDefault()

        this.bus.emit('to-previous-record', {currentId: this.id()})
      }

      next() {
        event.preventDefault()
        this.bus.emit('to-next-record', {currentId: this.id()})
      }

      id() {
        const url = Url.current()
        return parseInt(url.hashPath().split('/')[2])
      }



      closePath() {
        const url = Url.current()
        url.setHashPath('')
        return url.formatHash() || '#'
      }
    }
  </script>
</dfkv-record>