<dfkv-record class="overlay-page">
  <a class="close" href={closePath()}><dfk-icon type="cross" /></a>

  <template if={state.item}>
    <div class="p-7">
      <div class="mb-6">
        <a href="/print" class="mr-3"><dfk-icon type="print" /></a>
        <a href="/json"><dfk-icon type="braces" /></a>
      </div>

      <div class="position-relative">
        <a
          if={!props.first(id())}
          class="previous" onclick={event => previous(event)}
        >
          <dfk-icon type="chevron-left" />
        </a>

        <a
          if={!props.last(id())}
          class="next"
          onclick={event => next(event)}
        >
          <dfk-icon type="chevron-right" />
        </a>

        <div class="float-right mt-2">{t('id')} {id()}</div>
        <h1 class="mt-4 mb-6">{state.item.title()}</h1>
      </div>

      <div
        if={state.item.authors()}
        class="mb-3 fst-italic"
      >{state.item.authors()}</div>

      <div class="volumes">
        <div
          each={volume in state.item.volumes()}
          class="volume"
        >
          <div if={volume.journal}>
            <a
              class="d-block text-decoration-underline"
              onclick={event => openJournal(volume.journal, event)}
            >{l(volume.journal)}</a>
          </div>
          <div class="d-flex justify-content-between">
            <div>{volume.bibliography}</div>
            <div class="text-right"><dfk-icon type="book" /></div>
          </div>
        </div>
      </div>

      <dfk-blockquote
        if={state.item.citation()}
        class="mt-7"
      >
        {state.item.citation()}
      </dfk-blockquote>

      <div class="expose mt-7">
        <div class="attribute-list">
          <div class="attribute">{cap(t('description_comment'))}</div>
          <div class="value">{state.item.transcription()}</div>

          <div class="attribute">{cap(t('people'))}</div>
          <div class="value">
            <a
              each={(person, i) in state.item.involved()}
              class="d-block text-decoration-underline"
              onclick={event => openPerson(person, event)}
            >{person.display_name}</a>
          </div>

          <div class="attribute">{cap(t('text_type'))}</div>
          <div class="value">{state.item.textTypes()}</div>

          <div class="attribute">{cap(t('tags'))}</div>
          <div class="value">{state.item.tags()}</div>
        </div>
      </div>

      <div class="expose mt-7">
        <div class="attribute-list">
          <div class="attribute">{cap(t('project_affiliation'))}</div>
          <div class="value">{state.item.project()}</div>

          <div class="attribute">{cap(t('citation_format'))}</div>
          <div class="value">
            <a href={state.item.citationLink()}>
              {state.item.citationLink()}
            </a>
          </div>
        </div>
      </div>
    </div>

    <dfk-popup open={!!state.person}  if={!!state.person}>
      <div style="margin: 40px">
        <div class="header d-flex justify-content-between">
          <div class="tag-line mb-5">{cap(t('person_details'))}</div>
          <a onclick={event => closePerson(event)}>
            <dfk-icon type="cross" />
          </a>
        </div>
        <h2 class="mt-1">{state.person.display_name}</h2>
        <div class="body">
          <div class="attribute-list mt-7">
            <div class="value">
              <div if={state.person.birth_date}>
                {cap(t('born'))} {formatDate(state.person.birth_date)}

                <span if={state.person.birth_place}>
                  ,
                  <a
                    href="https://www.wikidata.org/wiki/{state.person.birth_place.id}"
                    target="_blank"
                    rel="noopener"
                  >
                    {state.person.birth_place.name}
                  </a>
                </span>
              </div>
              <div if={state.person.death_date}>
                {cap(t('died'))} {formatDate(state.person.death_date)}

                <span if={state.person.death_place}>
                  ,
                  <a
                    href="https://www.wikidata.org/wiki/{state.person.death_place.id}"
                    target="_blank"
                    rel="noopener"
                  >
                    {state.person.death_place.name}
                  </a>
                </span>
              </div>
            </div>

            <div class="attribute">{cap(t('authority_data'))}</div>
            <div class="value">
              <dfk-authority-link type="ulan" id={state.person.ulan_id} />
              <dfk-authority-link type="wikidata" id={state.person.wikidata_id} />
            </div>
          </div>
        </div>
      </div>
    </dfk-popup>

    <dfk-popup open={!!state.journal}  if={!!state.journal}>
      <div style="margin: 40px">
        <div class="header d-flex justify-content-between">
          <div class="tag-line mb-5">{cap(t('journal_details'))}</div>
          <a onclick={event => closeJournal(event)}>
            <dfk-icon type="cross" />
          </a>
        </div>

        <h2 class="mt-1">{l(state.journal)}</h2>
        <div class="body">
          <div class="attribute-list mt-7">
            <div class="attribute">
              {cap(t('authority_data'))}
            </div>
            <div class="value">
              <dfk-authority-link type="gnd" id={state.journal.gnd_id} />
              <dfk-authority-link type="bnf" id={state.journal.bnf_id} />
              <dfk-authority-link type="wikidata" id={state.journal.wikidata_id} />
            </div>
        </div>
      </div>
    </dfk-popup>
  </template>
  
  <script>
    import {Url} from '@wendig/lib'

    import AuthorityLink from '../authority_link.riot'
    import Blockquote from '../blockquote.riot'
    import Icon from '../icon.riot'
    import Popup from '../popup.riot'
    import Search from '../../lib/search'

    export default class {
      static components = {
        'dfk-authority-link': AuthorityLink,
        'dfk-blockquote': Blockquote,
        'dfk-icon': Icon,
        'dfk-popup': Popup
      }

      constructor() {
        this.fetch = this.fetch.bind(this)
      }

      title() {
        return this.state.item && this.state.item.id()
      }

      onBeforeMount() {
        window.addEventListener('hashchange', this.fetch)

        this.fetch()
      }

      onUnmounted() {
        window.removeEventListener('hashchange', this.fetch)
      }

      fetch() {
        Search.findRecord(this.id()).then(data => this.update({'item': data}))
      }

      previous(event) {
        event.preventDefault()

        this.bus.emit('to-previous-record', {currentId: this.id()})
      }

      next(event) {
        event.preventDefault()

        this.bus.emit('to-next-record', {currentId: this.id()})
      }

      id() {
        const url = Url.current()
        return parseInt(url.hashPath().split('/')[2])
      }

      closePath() {
        const url = Url.current()
        url.setHashPath('')
        return url.formatHash() || '#'
      }

      openPerson(person, event) {
        event.preventDefault()

        this.update({person: person})
      }

      closePerson() {
        this.update({person: null})
      }

      openJournal(journal, event) {
        event.preventDefault()

        this.update({journal: journal})
      }

      closeJournal() {
        this.update({journal: null})
      }

      formatDate(str) {
        const m = str.match(/^([+-])?([\d]+)\-(\d+)\-(\d+)/)
        if (!m) {return null}

        let [_, sign, year, month, day] = m
        year = parseInt(year) * (sign == '-' ? -1 : 1)
        month = parseInt(month)
        day = parseInt(day)

        const result = [year]
        if (month > 0) {result.unshift(month)}
        if (day > 0) {result.unshift(day)}

        return result.join('.')
      }
    }
  </script>
</dfkv-record>