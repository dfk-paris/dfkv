<dfkv-search>
  <dfkv-search-form
    on-inputs-changed={this.onInputsChanged}
    criteria={params()}
    results={state.results}
  />

  <dfkv-search-results
    if={state.results}
    on-inputs-changed={this.onInputsChanged}
    criteria={params()}
    results={state.results}
  />

  <dfkv-routed-modal first={isFirst} last={isLast} />
  <dfkv-fly-in />

  <script>
    import {Url} from '@wendig/lib'

    import Search from '../../lib/search'
    import {params} from '../../lib/url_search'
    import watchlist from '../../lib/watchlist'

    import FlyIn from './fly_in.riot'
    import RoutedModal from './routed_modal.riot'
    import SearchForm from '../search_form.riot'
    import SearchResults from '../search_results.riot'

    export default class {
      static components = {
        'dfkv-search-form': SearchForm,
        'dfkv-search-results': SearchResults,
        'dfkv-routed-modal': RoutedModal,
        'dfkv-fly-in': FlyIn
      }

      constructor() {
        this.params = params
        
        this.onHashChanged = this.onHashChanged.bind(this)
        this.onResults = this.onResults.bind(this)
        this.toPreviousRecord = this.toPreviousRecord.bind(this)
        this.toNextRecord = this.toNextRecord.bind(this)
        this.isFirst = this.isFirst.bind(this)
        this.isLast = this.isLast.bind(this)
        this.open = this.open.bind(this)

      }

      onBeforeMount() {
        window.addEventListener('hashchange', this.onHashChanged)
        this.on('search-results', this.onResults)
        this.on('to-previous-record', this.toPreviousRecord)
        this.on('to-next-record', this.toNextRecord)
        this.on('open-item', this.open)
        this.on('watchlist-changed', this.onHashChanged)

        this.onHashChanged(null, false)
        this.fetchProjects()
      }

      onUnmounted() {
        window.removeEventListener('hashchange', this.onHashChanged)
      }

      onHashChanged(event, doUpdate = true) {
        this.state = {...this.state, ...this.params()}

        this.onSearch()

        if (doUpdate) {
          this.update()
        }
      }

      onInputsChanged(values, resetPage = true) {
        if (resetPage) {
          values['page'] = null
        }

        const url = Url.current()
        url.updateHashParams(values)

        if (url.formatHash() == '') {
          url.setHashPath('/')
        }

        url.apply()
      }

      onSearch() {
        const p = this.params()
        if (p['watchlist'] && watchlist.count() > 0) {
          p['id'] = watchlist.unpack().join(',')
          delete p['watchlist']
        }

        Search.search(p)
      }

      onResults(event) {
        this.state.results = event.data

        // open result for single-view pagination
        if (this.state.open != null) {
          const item = this.state.results.items()[this.state.open]
          this.bus.emit('open-item', item)
          this.state.open = null
          this.state.transitioning = false
        }

        this.update()
      }

      fetchProjects() {
        fetch(`${staticUrl}/projects.json`).then(r => r.json()).then(data => {
          this.bus.data['projects'] = data
          this.update()
        })
      }

      isFirst(id) {
        if (!this.results()) {return false}

        const result = (
          this.indexFor(id) == 0 &&
          this.params()['page'] == 1
        )

        return result
      }

      isLast(id) {
        if (!this.results()) {return false}

        const p = this.params()
        const items = this.state.results.items()
        const pages = Math.ceil(this.state.results.total() / p['perPage'])

        const result = (
          this.indexFor(id) == items.length - 1 &&
          this.params()['page'] == pages
        )

        return result
      }

      results() {
        if (this.state && this.state.results) {
          return this.state.results
        }
      }

      indexFor(id) {
        const items = this.state.results.items()
        for (const [i, item] of items.entries()) {
          if (item.id() == id) {
            return i
          }
        }
      }

      toPreviousRecord(event) {
        // prevent race-conditions
        if (this.state.transitioning == true) {
          return
        }
        this.state.transitioning = true

        const index = this.indexFor(event.data.currentId)
        const p = this.params()

        if (index == 0) {
          if (p['page'] > 1) {
            // paginate to previous page of results and open last result when
            // loaded
            this.state.open = p['perPage'] - 1
            this.bus.emit('to-previous-page')
          } else {
            this.state.transitioning = false
          }
        } else {
          const item = this.state.results.items()[index - 1]
          this.bus.emit('open-item', item)
          this.state.transitioning = false
        }
      }

      toNextRecord(event) {
        // prevent race-conditions
        if (this.state.transitioning == true) {
          return
        }
        this.state.transitioning = true

        const index = this.indexFor(event.data.currentId)
        const p = this.params()

        if (index == this.state.results.items().length - 1) {
          const pages = Math.ceil(this.state.results.total() / p['perPage'])
          if (p['page'] < pages) {
            // paginate to next page of results and open first result when
            // loaded
            this.state.open = 0
            this.bus.emit('to-next-page')
          } else {
            this.state.transitioning = false
          }
        } else {
          const item = this.state.results.items()[index + 1]
          this.bus.emit('open-item', item)
          this.state.transitioning = false
        }
      }

      open(event) {
        const item = event.data
        const url = Url.current()
        url.setHashPath(`/records/${item.id()}`)
        url.apply()
      }
    }
  </script>
</dfkv-search>
