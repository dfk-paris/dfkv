<wikidata-entities>
  <div class="d-flex">
    <div class="w-40 pr-7">
      <dfk-input
        placeholder="Search for Wikidata Q Number or Name"
        type="text"
        name="terms"
        update-handler={this.delayedUpdateUrl}
        value={state.terms}
      />
    </div>
    <div class="w-60">
      <template if={state.records}>
        <wikidata-register aggs={state.aggs} />

        <small class="d-block my-4">{state.total}</small>

        <dfk-pagination
          class="mt-3 pb-3 border-bottom justify-content-start"
          page={state.page}
          total={state.total}
          per-page={20}
          page-to={pageTo}
        />

        <ul class="list-unstyled">
          <li each={record in state.records} class="py-3 border-bottom">
            <span class="fw-bold">{record['label']}&nbsp;</span>{record['dfk_id']}

            <div class="pl-3">
              <dfk-authority-link
                if={record['wikidata_id']}
                type="wikidata"
                id={record['wikidata_id']}
                linkify-id={true}
                class="d-block mb-3"
              />

              <dfk-authority-link
                each={k in Object.keys(record['refs'])}
                type={k}
                id={record['refs'][k]}
                linkify-id={true}
              />
            </div>
          </li>
        </ul>
      </template>
    </div>
  </div>

  <script>
    import search from '../../lib/wikidata/search'
    import {Url} from '@wendig/lib'

    import DfkInput from '../input.riot'
    import DfkAuthorityLink from '../authority_link.riot'
    import DfkPagination from '../pagination.riot'
    import WikidataRegister from './register.riot'

    export default class {
      static components = {
        'dfk-input': DfkInput,
        'dfk-authority-link': DfkAuthorityLink,
        'dfk-pagination': DfkPagination,
        'wikidata-register': WikidataRegister
      }

      constructor() {
        this.urlChanged = this.urlChanged.bind(this)
        this.delayedUpdateUrl = this.delayedUpdateUrl.bind(this)
        this.onInput = this.onInput.bind(this)
      }

      onBeforeMount(props, state) {
        window.addEventListener('hashchange', this.urlChanged)
        this.urlChanged()
      }

      onUnmounted() {
        window.removeEventListener('hashchange', this.urlChanged)
      }

      onInput() {
        const terms = this.root.querySelector('input').value

        const url = Url.current()
        url.updateHashParams({terms})
        url.apply()
      }

      delayedUpdateUrl(event) {
        if (this.timeout) {
          window.clearTimeout(this.timeout)
          this.timeout = null
        }

        this.timeout = window.setTimeout(this.onInput, 300)
      }

      pageTo(newPage) {
        const url = Url.current()
        url.updateHashParams({page: newPage})
        url.apply()
      }

      urlChanged(event) {
        const url = Url.current()
        const {letter, page, terms} = url.hashParams()

        search.query({letter, page, terms}).then(data => {
          console.log(data)

          this.update({
            records: data.results,
            aggs: data.aggs,
            page: data.page,
            terms: data.terms,
            total: data.total
          })
        })
      }

    }
  </script>
</wikidata-entities>
