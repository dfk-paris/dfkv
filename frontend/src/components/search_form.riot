<dfkv-search-form>
  <h3>{t('search_criteria')}</h3>

  <template if={watchlistCount() > 0}>
    <dfk-input
      label="{cap(t('watchlist_only'))} ({tCounter(watchlistCount(), 'record', 'records')})"
      name="watchlist"
      type="checkbox"
      value={props.criteria.watchlist}
      update-handler={this.updateUrl}
    />

    <a
      onclick={event => clearWatchlist()}
      class="d-block mt-1 mb-4 fs-6 text-decoration-underline"
    >{t('empty_watchlist')}</a>

  </template>

  <dfk-input
    placeholder={t('fulltext_search')}
    name="terms"
    update-handler={this.delayedUpdateUrl}
    value={props.criteria.terms}
  />

  <dfk-range-control
    if={props.results}
    from={props.criteria.from || firstYear()}
    to={props.criteria.to || lastYear()}
    min={firstYear()}
    max={lastYear()}
    bins={props.results.aggregations().year.buckets.map(e => e.doc_count)}
    on-inputs-changed={props.onInputsChanged}
  />

  <h3>{t('your_selection')}</h3>

  <dfk-active-filters
    criteria={props.criteria}
    params={['creator', 'journal', 'involved', 'type']}
    remove-filter={(param, value) => removeFilter(param, value)}
  />

  <h3>{t('filters')}</h3>

  <dfk-facet
    if={props.results}
    tag_line={t('people_facet_tag_line')}
    name={t('people')}
    text={t('people_facet_text')}
    criteria={props.criteria}
    aggregation={props.results.aggregations().involved}
    add-filter={newFilter => addFilter('involved', newFilter)}
    class="d-block mb-4"
  />

  <dfk-facet
    if={props.results}
    name={t('authors')}
    aggregation={props.results.aggregations().creator}
    add-filter={newFilter => addFilter('creator', newFilter)}
    class="d-block mb-4"
  />

  <dfk-facet
    if={props.results}
    tag_line={t('journal_facet_tag_line')}
    name={t('journals')}
    text={t('journal_facet_text')}
    criteria={props.criteria}
    aggregation={props.results.aggregations().journal}
    add-filter={newFilter => addFilter('journal', newFilter)}
    class="d-block mb-4"
  />

  <dfk-facet
    if={props.results}
    name={t('text_type')}
    criteria={props.criteria}
    aggregation={props.results.aggregations().type}
    add-filter={newFilter => addFilter('type', newFilter)}
    class="d-block mb-4"
  />

  <script>
    import {i18n, Url} from '@wendig/lib'
    import search from '../lib/search'
    import watchlist from '../lib/watchlist'

    import ActiveFilters from './active_filters.riot'
    import Input from './input.riot'
    import RangeControl from './range_control.riot'
    import Facet from './facet.riot'

    export default class {
      static components = {
        'dfk-active-filters': ActiveFilters,
        'dfk-facet': Facet,
        'dfk-input': Input,
        'dfk-range-control': RangeControl,
      }

      constructor() {
        this.delayedUpdateUrl = this.delayedUpdateUrl.bind(this)
        this.updateUrl = this.updateUrl.bind(this)

        this.t = i18n.translate
      }

      onMounted() {
        this.on('watchlist-changed', event => this.update())
      }

      updateUrl() {
        const newParams = {...this.inputValues(), page: 1}
        this.props.onInputsChanged(newParams)
      }

      inputValues() {
        const result = {}
        for (const input of this.tags['dfk-input']) {
          result[input.getName()] = input.getValue()
        }
        return result
      }

      delayedUpdateUrl(event) {
        if (this.timeout) {
          window.clearTimeout(this.timeout)
          this.timeout = null
        }

        this.timeout = window.setTimeout(this.updateUrl, 300)
      }

      firstYear() {
        const buckets = this.props.results.aggregations().year.buckets
        return buckets[0] ? parseInt(buckets[0].key_as_string) : 1842
      }

      lastYear() {
        const buckets = this.props.results.aggregations().year.buckets
        const last = buckets[buckets.length - 1]
        return last ? parseInt(last.key_as_string) : 1978
      }

      addFilter(param, value) {
        let current = this.props.criteria[param]
        current = current ? current.split('|') : []
        const index = current.indexOf(value)

        if (index == -1) {
          current.push(value)
          this.props.onInputsChanged({[param]: current.join('|')})
        }
      }

      removeFilter(param, value) {
        let current = this.props.criteria[param]
        current = (current ? current.split('|') : [])
        const index = current.indexOf(value)

        if (index != -1) {
          current.splice(index, 1)
          const newValue = (current.length == 0 ? null : current.join('|'))
          this.props.onInputsChanged({[param]: newValue})
        }
      }

      watchlistCount() {
        return watchlist.count()
      }

      clearWatchlist() {
        watchlist.clear()
      }
    }
  </script>
</dfkv-search-form>