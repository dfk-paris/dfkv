<dfkv-search-results>
  <div class="mb-3 d-print-none">
    <a
      if={manyResults()}
      many-results="true"
      title={t('print_too_many_results')}
    ><dfk-icon type="print" /></a>
    <a
      if={!manyResults()}
      onclick={event => print(event)}
    ><dfk-icon type="print" /></a>
  </div>

  <div>{t('search_results')}: {props.results.total()}</div>

  <dfk-pagination
    page={props.criteria.page || 1}
    per-page={props.criteria.per_page || 10}
    total={props.results.total()}
    page-to={page => this.toPage(page)}
  />

  <dfk-tabs if={state.projects}>
    <dfk-tab
      each={project in Object.values(state.projects)}
      id={project.id}
      active-tab={props.criteria.project}
      activate={newTab => this.toTab(newTab)}
    >{l(project)} ({countForBucket('project_id', project.id)})</dfk-tab>
  </dfk-tabs>

  <div class="sort">
    <div>
      {t('sort_by')}:&nbsp;
      <a
        onclick={event => this.sortBy('creator', event)}
        class={props.criteria.sort == 'creator' ? 'text-underline' : ''}
      >{t('author')}</a>
      |
      <a
        onclick={event => this.sortBy('date', event)}
        class={props.criteria.sort == 'date' ? 'text-underline' : ''}
      >{t('date')}</a>
    </div>
  </div>

  <div class="search-results" if={props.results}>
    <div
      each={item in props.results.items()}
      class="search-result"
    >
      <dfkv-bookmark item={item} />

      <div class="active-box">
        <a class="stretched-link" href={itemPath(item.id())}></a>

        <div class="content-box">
          <div class="meta">
            <div class="d-flex justify-content-between">
              <div>
                <div
                  if={item.authors()}
                  class="mb-3 fst-italic"
                >{item.authors()}</div>
                <div class="mb-3 fw-bold">{item.title()}</div>
              </div>
              <div>
                <div class="text-end">
                  <span class="text-muted">{t('id')}&nbsp;</span>
                  {item.id()}
                </div>
                <div class="text-end">
                  <span class="text-muted">{t('date')}&nbsp;</span>
                  {item.date()}
                </div>
              </div>
            </div>

            <div class="volumes">
              <div
                each={volume in item.volumes()}
                class="volume"
              >
                <div if={volume.journal}>{l(volume.journal)}</div>
                <div class="d-flex justify-content-between">
                  <div>{volume.bibliography}</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <dfkv-multi-record
    items={state.printItems}
    style="display: none"
  />


  <script>
    import {i18n, Url} from '@wendig/lib'
    import {util} from '@wendig/lib'

    import Bookmark from './dfkv/bookmark.riot'
    import Pagination from './pagination.riot'
    import Tab from './tab.riot'
    import Icon from './icon.riot'
    import MultiRecord from './dfkv/multi_record.riot'
    import Search from '../lib/search'

    export default class {
      static components = {
        'dfkv-bookmark': Bookmark,
        'dfk-icon': Icon,
        'dfk-pagination': Pagination,
        'dfk-tab': Tab,
        'dfkv-multi-record': MultiRecord
      }

      onBeforeMount() {
        this.on('search-criteria', event => this.update({criteria: event.data}))

        fetch(`${staticUrl}/projects.json`).then(r => r.json()).then(data => {
          this.update({projects: data})
        })
      }

      toPage(newPage) {
        this.props.onInputsChanged({page: newPage}, false)
      }

      toTab(newTab) {
        this.props.onInputsChanged({project: newTab})
      }

      sortBy(attrib, event) {
        const current = this.props.criteria.sort
        const newValue = (current == attrib ? null : attrib)

        this.props.onInputsChanged({sort: newValue})
      }

      countForBucket(aggregation, key) {
        const buckets = this.props.results.aggregations()[aggregation].buckets
        for (const bucket of buckets) {
          if (bucket.key == key) {
            return bucket.doc_count
          }
        }

        return 0
      }

      itemPath(itemId, position = null) {
        const url = Url.current()
        url.setHashPath(`/records/${itemId}`)
        return url.formatHash()
      }

      manyResults() {
        return this.props.results.total() > 100
      }

      print(event) {
        event.preventDefault()

        const criteria = {
          ...this.state.criteria,
          ...{page: 1, per_page: 10000}
        }

        Search.fetch(criteria).then(items => {
          this.update({printItems: items.items()})
          const element = this.root.querySelector('dfkv-multi-record')
          const styles = document.querySelectorAll('head > style')
          const css = [...styles].map(e => e.innerHTML).join()
          util.printElement(element, {css: css, print: true})
          this.update({printItems: []})
        })
      }
    }
  </script>
</dfkv-search-results>
