#!/usr/bin/env ruby

require 'proweb'
require 'progressbar'

Proweb.config = YAML.load_file('app.yml')
Proweb.connect

# Proweb::Import.new(Proweb.source, Proweb.target).run

class Importer
  def initialize
    @kind_ids = []
    @data = {
      'objects' => [],
      'people' => {},
      'attributes' => {},
      'kinds' => {},
      'klasses' => {},
      'projects' => {}
    }
  end

  def run
    # binding.pry
    objects
    write
    to_sql
  end

  def objects
    objects = Proweb::Object.
      includes(:project, :journal, :volume, :rubric, :location, :editor, :pw_attributes, object_people: :person).
      where(project_id: [1, 2, 14])
      
    progress = Proweb.progress_bar(title: 'objects', total: objects.count)
    objects.find_each batch_size: 50 do |o|
      result = {
        'id' => o.id,
        'title' => o.translations.first.title,
        'people' => o.people_ids_by_role_ids,
        'attributes' => o.attribute_ids_by_type_ids,
        'date' => parse_date(o.issued_on),
        'date_human' => o.issued_on_human,
        'citation' => o.citation,
        'transcription' => o.transcription,
        'comment' => o.comment,
        'journal_id' => o.journal_id,
        'volume_id' => o.volume_id,
        'project_id' => o.project_id,
        'rubric_id' => o.rubric_id,
        'location_id' => o.location_id,
        'editor_id' => o.editor_id
      }

      # cleanup
      ['title', 'date', 'date_human', 'citation', 'transcription', 'comment'].each do |f|
        result[f].strip! if result[f].is_a?(String)
      end

      if o.project
        @data['projects'][o.project_id] ||= translated(o.project)
      end

      if o.journal
        @data['attributes'][o.journal_id] ||= attrib(o.journal)
      end

      if o.volume
        @data['attributes'][o.volume_id] ||= attrib(o.volume)
      end

      if o.rubric
        @data['attributes'][o.rubric_id] ||= attrib(o.rubric)
      end

      if o.location
        @data['attributes'][o.location_id] ||= attrib(o.location)
      end

      if o.editor
        @data['attributes'][o.editor_id] ||= attrib(o.editor)
      end

      o.object_people.each do |op|
        @data['attributes'][op.kind_id] ||= attrib(op.kind)
        @data['people'][op.person_id] ||= {
          'display_name' => op.person.display_name,
          'first_name' => op.person.first_name,
          'last_name' => op.person.last_name
        }
      end

      o.pw_attributes.each do |a|
        @data['attributes'][a.id] ||= attrib(a)
      end

      @data['objects'] << result.compact
      progress.increment
    end

    Proweb::AttributeKind.where(id: @kind_ids).each do |kind|
      @data['kinds'][kind.id] = translated(kind).merge('klass_id' => kind.attribute_klass_id)
      @data['klasses'][kind.attribute_klass_id] = {'de' => kind.klass.name}
    end
  end

  def to_sql
    @data = JSON.parse(File.read 'widgets/vendor/other/data.json')
    system 'rm', '-f', 'data.sqlite3'
    db = Sequel.connect('mysql2://root:root@127.0.0.1/dfkv')

    db.tables.each do |t|
      db.drop_table t
    end

    db.create_table :records do
      primary_key :id
      String :title
      Date :date
      String :date_human
      String :citation, text: true
      String :transcription, text: true
      String :comment, text: true
      Integer :journal_id
      Integer :volume_id
      Integer :project_id
      Integer :rubric_id
      Integer :location_id
      Integer :editor_id
    end

    db.create_table :people do
      primary_key :id
      String :display_name
      String :first_name
      String :last_name
    end

    db.create_table :attribs do
      primary_key :id
      Integer :kind_id
      String :de
      String :en
      String :fr
    end

    db.create_table :kinds do
      primary_key :id
      Integer :klass_id
      String :de
      String :en
      String :fr
    end

    db.create_table :klasses do
      primary_key :id
      String :de
      String :en
      String :fr
    end

    db.create_table :attribs_records do
      Integer :attrib_id
      Integer :record_id
      index [:attrib_id, :record_id]
    end

    db.create_table :people_records do
      Integer :person_id
      Integer :record_id
      Integer :role_id
      index [:person_id, :record_id, :role_id]
    end

    progress = Proweb.progress_bar(title: 'kinds -> sql', total: @data['kinds'].keys.size)
    @data['kinds'].each do |id, k|
      db[:kinds].insert(
        id: id,
        klass_id: k['klass_id'],
        de: k['de'],
        en: k['en'],
        fr: k['fr']
      )
      progress.increment
    end

    progress = Proweb.progress_bar(title: 'klasses -> sql', total: @data['klasses'].keys.size)
    @data['klasses'].each do |id, k|
      db[:klasses].insert(
        id: id,
        de: k['de'],
        en: k['en'],
        fr: k['fr']
      )
      progress.increment
    end

    progress = Proweb.progress_bar(title: 'objects -> sql', total: @data['objects'].size)
    @data['objects'].each do |o|
      attribs = o.delete 'attributes'
      people = o.delete 'people'
      db[:records].insert(o)

      attribs.each do |klass_id, d|
        d.each do |kind_id, d|
          d.each do |id|
            db[:attribs_records].insert(attrib_id: id, record_id: o['id'])
          end
        end
      end

      people.each do |role_id, ids|
        ids.each do |id|
          db[:people_records].insert(person_id: id, record_id: o['id'], role_id: role_id)
        end
      end

      progress.increment
    end

    progress = Proweb.progress_bar(title: 'attributes -> sql', total: @data['attributes'].keys.size)
    @data['attributes'].each do |id, a|
      db[:attribs].insert(
        id: id,
        kind_id: a['kind_id'],
        de: a['de'],
        en: a['en'],
        fr: a['fr']
      )
      progress.increment
    end

    progress = Proweb.progress_bar(title: 'people -> sql', total: @data['people'].keys.size)
    @data['people'].each do |id, person|
      db[:people].insert person.merge(id: id)
      progress.increment
    end

    db.alter_table :records do
      add_index :title
      add_index :date
      add_index :journal_id
      add_index :volume_id
      add_index :project_id
      add_index :rubric_id
      add_index :location_id
      add_index :editor_id
    end

    db.alter_table :people do
      add_index :display_name
    end
  end

  private

    def person(ar)
      ar.display_name || "#{ar.first_name} #{ar.last_name}"
    end

    def parse_date(str)
      if str.is_a?(String)
        Time.strptime(str, "%Y.%m.%d").to_date
      end
    end

    def write
      File.open 'widgets/vendor/other/data.json', 'w' do |f|
        f.write JSON.dump(@data)
      end
    end

    def translated(attrib)
      mapping = {'Deutsch' => 'de', 'Englisch' => 'en', 'Französisch' => 'fr', '?' => '??'}
      results = {}
      attrib.translations.each do |t|
        case t.language.name
        when 'Deutsch'
          results['de'] = t.name
        when 'Englisch'
          results['en'] = t.name
        when 'Französisch'
          results['fr'] = t.name
        else
          results = {
            'en' => t.name,
            'de' => t.name,
            'fr' => t.name
          }
        end
        results[mapping[t.language.name]] = t.name
      end
      results
    end

    def attrib(a)
      @kind_ids << a.attribute_kind_id

      translated(a).merge(
        'kind_id' => a.attribute_kind_id,
        'klass_id' => a.kind.attribute_klass_id
      )
    end
end

# class Hash
#   def remap(&block)
#     result = {}
#     self.each do |k, v|
#       result[k] = yield(k, v)
#     end
#     result
#   end
# end

Importer.new.run
